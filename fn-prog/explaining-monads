trait Monoid[A] {
def append(a: A, b: A): A
def identity:A
}
object IntegerAdition extends Monoid[Int] {
def append(a: Int, b: Int): Int = a + b
def identity: Int = 0
}
IntegerAdition.append(1, 2)
object FunctionComposition {
def append[A, B, C](a: A => B, b: B => C): A => C = a.andThen(b)
def identity[A]: A => A = a => a
}
object StringConcatination extends Monoid[String] {
def append(a: String, b: String): String = a + b
def identity: String = ""
}
class ListConcatination[A] extends Monoid[List[A]] {
def append(a: List[A], b: List[A]): List[A] = a ++ b
def identity: List[A] = List.empty[A]
}
val lconcat = new ListConcatination[Int]
lconcat.append(List(1), List(2, 3))
trait Functor[F[_]] {
def map[A, B](a: F[A])(fn: A => B): F[B]
}
